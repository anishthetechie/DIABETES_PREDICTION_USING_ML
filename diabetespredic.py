# -*- coding: utf-8 -*-
"""DIABETESPREDIC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xJAgCRHJAnQXTY-egZhli2aUhrEKkdFx
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split #to split the datasets of training model
from sklearn import svm  #support vector machine
from sklearn.metrics import accuracy_score

diabetes_dataset = pd.read_csv('/content/diabetes.csv') #COMMAND SEPARATED VALUE

pd.read_csv? #to know more about func

diabetes_dataset.head() #to print the first 5 rows of dataset

diabetes_dataset.shape #768 people, 9 columns

diabetes_dataset.describe()

"""0 => non-diabetic ; 1 => diabetic"""

diabetes_dataset['Outcome'].value_counts()

diabetes_dataset.groupby('Outcome').mean()

X = diabetes_dataset.drop(columns = 'Outcome', axis = 1)
Y = diabetes_dataset['Outcome']

print(X)

print(Y)

#DATA STANDARDIZATION
scaler = StandardScaler()

scaler.fit(X)

standardized_data = scaler.transform(X)
print(standardized_data)

X = standardized_data
Y = diabetes_dataset['Outcome']
print(X)
print(Y)

#TRAIN TEST SPLIT
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, stratify = Y, random_state = 2 )

print(X.shape, X_train.shape, X_test.shape)

#TRAINING THE MODEL
classifier = svm.SVC(kernel = 'linear')

classifier.fit(X_train, Y_train)

#MODEL EVALUATION
#ACCURACY SCORE ON TRAINING DATA
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy score of the training data: ',training_data_accuracy)

X_train_prediction = classifier.predict(X_train)
test_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy score of the test data: ',test_data_accuracy)

#MAKING A PREDICTIVE SYSTEM
input_data = (6,148,72,35,0,33.6,0.627,50) #INPUT DATA FROM USER
#CHANGING THE INPUT DATA AS NUMPY ARRAY
input_data_as_nparray = np.asarray(input_data)

#RESHAPING THE ARRAY AS WE ARE PREDICTING FOR ONE CASE
input_data_rehshaped = input_data_as_nparray.reshape(1,-1)

#STANDARDIZE THE INPUT DATA (AS THERE IS VARIATION IN INDIVIDUAL DATASETS)
std_data = scaler.transform(input_data_rehshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if (prediction [0] == 0):
  print('Non-Diabetic')
else:
  print('Diabetic')

